{"title":"typescript发布订阅模式","uid":"58b0e742b6765064608cd70804d613ce","slug":"TypeScript/06.typescript发布订阅模式","date":"2023-02-06T15:51:34.000Z","updated":"2023-02-06T15:51:57.562Z","comments":true,"path":"api/articles/TypeScript/06.typescript发布订阅模式.json","keywords":null,"cover":"../img/u=3648235042,1573336415&fm=253&fmt=auto&app=138&f=PNG.webp","content":"<h2 id=\"发布订阅模式\"><a href=\"#发布订阅模式\" class=\"headerlink\" title=\"发布订阅模式\"></a>发布订阅模式</h2><h4 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1. 定义\"></a>1. 定义</h4><p>发布-订阅模式其实是一种对象间一对多的依赖关系，当一个对象的状态发送改变时，所有依赖于它的对象都将得到状态改变的通知。<br> 订阅者（Subscriber）把自己想订阅的事件注册（Subscribe）到调度中心（Event Channel），当发布者（Publisher）发布该事件（Publish Event）到调度中心，也就是该事件触发时，由调度中心统一调度（Fire Event）订阅者注册到调度中心的处理代码。</p>\n<h4 id=\"2-例子\"><a href=\"#2-例子\" class=\"headerlink\" title=\"2. 例子\"></a>2. 例子</h4><p>比如我们很喜欢看某个公众号号的文章，但是我们不知道什么时候发布新文章，要不定时的去翻阅；这时候，我们可以关注该公众号，当有文章推送时，会有消息及时通知我们文章更新了。<br> 上面一个看似简单的操作，其实是一个典型的发布订阅模式，公众号属于发布者，用户属于订阅者；用户将订阅公众号的事件注册到调度中心，公众号作为发布者，当有新文章发布时，公众号发布该事件到调度中心，调度中心会及时发消息告知用户。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/056aa1574a9542ae9cdf44bf790cea71.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bCP5ruhenM=,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"img\"></p>\n<h2 id=\"实现发布-订阅模式\"><a href=\"#实现发布-订阅模式\" class=\"headerlink\" title=\"实现发布-订阅模式\"></a>实现发布-订阅模式</h2><h4 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1、创建一个对象<br> 2、在该对象上创建一个缓存列表（调度中心）<br> 3、on 方法用来把函数 fn 都加到缓存列表中（订阅者注册事件到调度中心）<br> 4、emit 方法取到 arguments 里第一个当做 event，根据 event 值去执行对应缓存列表中的函数（发布者发布事件到调度中心，调度中心处理代码）<br> 5、off 方法可以根据 event 值取消订阅（取消订阅）<br> 6、once 方法只监听一次，调用完毕后删除缓存函数（订阅一次）</p></blockquote>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// 发布订阅模式</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">EventFace</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function-variable function\">on</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>callback<span class=\"token operator\">:</span><span class=\"token builtin\">Function</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">emit</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span><span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">off</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>fn<span class=\"token operator\">:</span><span class=\"token builtin\">Function</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">once</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>fn<span class=\"token operator\">:</span><span class=\"token builtin\">Function</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">List</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Function</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dispatch</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">EventFace</span> <span class=\"token punctuation\">&#123;</span>\n    list<span class=\"token operator\">:</span> List\n    <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">on</span> <span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>callback<span class=\"token operator\">:</span><span class=\"token builtin\">Function</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">const</span> callbackList<span class=\"token operator\">:</span><span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Function</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        callbackList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> callbackList\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">emit</span> <span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span><span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">let</span> eventName<span class=\"token operator\">:</span><span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Function</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>eventName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            eventName<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>fn <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'该事件未监听'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">off</span> <span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>fn<span class=\"token operator\">:</span><span class=\"token builtin\">Function</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">let</span> eventName <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>eventName <span class=\"token operator\">&amp;&amp;</span> fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            eventName<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fns<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fns <span class=\"token operator\">===</span> fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    eventName<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">return</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'该事件未监听'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">once</span> <span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>fn<span class=\"token operator\">:</span><span class=\"token builtin\">Function</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">decor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span><span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> decor<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> decor<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\no<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">fnc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> <span class=\"token number\">2222</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\no<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> fnc<span class=\"token punctuation\">)</span>\no<span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> fnc<span class=\"token punctuation\">)</span>\n\no<span class=\"token punctuation\">.</span><span class=\"token function\">once</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'once'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n\no<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'222'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\no<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1233</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'11222'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"发布-订阅者模式的优点\"><a href=\"#发布-订阅者模式的优点\" class=\"headerlink\" title=\"发布/订阅者模式的优点\"></a>发布/订阅者模式的优点</h2><p><code>发布/订阅者模式</code>的优点可以归纳为:</p>\n<p>1.松耦合/Independence</p>\n<p><code>发布/订阅者模式</code>可以将众多需要通信的子系统(Subsystem)解耦，每个子系统都可以独立管理。而且即使部分子系统下线了，也不会影响系统消息的整体管理。</p>\n<p><code>发布/订阅者模式</code>为应用程序提供了关注点分离。每个应用程序都可以专注于其核心功能，而消息传递基础结构负责将消息路由到每个消费者手里。</p>\n<p>2.高伸缩性/Scalability</p>\n<p><code>发布/订阅者模式</code>增加了系统的可伸缩性，并提高了发送者的响应能力。原因是发送方(Publisher)可以快速地向输入通道发送一条消息，然后返回到其核心处理职责，而不必等待子系统处理完成。然后消息传递的基础结构负责确保把消息传递到每个订阅者(Subscriber)手里。</p>\n<p>3.高可靠性/Reliability</p>\n<p><code>发布/订阅者模式</code>提高了可靠性。异步的消息传递有助于应用程序在增加的负载下继续平稳运行，并且可以更有效地处理间歇性故障。</p>\n<p>4.灵活性/Flexibility</p>\n<p>你不需要关心不同的组件是如何组合在一起的，只要他们共同遵守一份协议即可。</p>\n<p><code>发布/订阅者模式</code>允许延迟处理或者按计划的处理。例如当系统负载大的时候，订阅者可以等到非高峰时间才接收消息，或者根据特定的计划处理消息。</p>\n<p>5.可测试性/Testability</p>\n<p><code>发布/订阅者模式</code>提高了可测试性。通道可以被监视，消息可以作为整体集成测试策略的一部分而被检查或记录。</p>\n","feature":false,"text":"发布订阅模式1. 定义发布-订阅模式其实是一种对象间一对多的依赖关系，当一个对象的状态发送改变时，所有依赖于它的对象都将得到状态改变的通知。 订阅者（Subscriber）把自己想订阅的事件注册（Subscribe）到调度中心（Event Channel），当发布者（Publis...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"TypeScript","slug":"TypeScript","count":6,"path":"api/categories/TypeScript.json"}],"tags":[{"name":"TypeScript","slug":"TypeScript","count":6,"path":"api/tags/TypeScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">发布订阅模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">1. 定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">2. 例子</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E5%8F%91%E5%B8%83-%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">实现发布-订阅模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">实现思路</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%91%E5%B8%83-%E8%AE%A2%E9%98%85%E8%80%85%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">发布&#x2F;订阅者模式的优点</span></a></li></ol>","author":{"name":"chenin","slug":"chenin","avatar":"/img/touxiang.jpg","link":"https://github.com/Ccc946","description":"盛年不重来，一日难再晨。及时宜自勉，岁月不待人。","socials":{"github":"https://github.com/Ccc946","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/","juejin":"https://juejin.cn/","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"typescript配置文件","uid":"ddb15248561add228bd6a63ffdb86463","slug":"TypeScript/05.typescript配置","date":"2023-02-05T15:30:34.000Z","updated":"2023-02-06T15:47:13.189Z","comments":true,"path":"api/articles/TypeScript/05.typescript配置.json","keywords":null,"cover":"../img/u=3648235042,1573336415&fm=253&fmt=auto&app=138&f=PNG.webp","text":"生成tsconfig.json 文件这个文件是通过tsc –init命令生成的 配置详解 \"compilerOptions\": &#123; \"incremental\": true, // TS编译器在第一次编译之后会生成一个存储编译信息的文件，第二次编译会在第一次的基础上进行增...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"TypeScript","slug":"TypeScript","count":6,"path":"api/categories/TypeScript.json"}],"tags":[{"name":"TypeScript","slug":"TypeScript","count":6,"path":"api/tags/TypeScript.json"}],"author":{"name":"chenin","slug":"chenin","avatar":"/img/touxiang.jpg","link":"https://github.com/Ccc946","description":"盛年不重来，一日难再晨。及时宜自勉，岁月不待人。","socials":{"github":"https://github.com/Ccc946","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/","juejin":"https://juejin.cn/","customs":{}}},"feature":false}}