{"title":"typescript数据类型","uid":"92b2261d7a01551b4d1eedb33cf3ba36","slug":"TypeScript/01.typescript数据类型","date":"2023-02-04T05:49:52.000Z","updated":"2023-02-05T15:35:39.603Z","comments":true,"path":"api/articles/TypeScript/01.typescript数据类型.json","keywords":null,"cover":"../img/default-cover.jpg","content":"<h2 id=\"基础数据类型\"><a href=\"#基础数据类型\" class=\"headerlink\" title=\"基础数据类型\"></a>基础数据类型</h2><p>TS是JS的超集，所以JS基础的类型都包含在内</p>\n<p><em><strong>起步安装 npm install typescript -g</strong></em></p>\n<p><em><strong>运行tsc 文件名</strong></em></p>\n<p>基础类型：Boolean、Number、String、<code>null</code>、<code>undefined</code> 以及 ES6 的 <a href=\"http://es6.ruanyifeng.com/#docs/symbol\">Symbol</a> 和 ES10 的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a>。</p>\n<h3 id=\"1-字符串类型\"><a href=\"#1-字符串类型\" class=\"headerlink\" title=\"1.字符串类型\"></a>1.字符串类型</h3><p>字符串是使用string定义的</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'123'</span>\n<span class=\"token comment\">//普通声明</span>\n \n<span class=\"token comment\">//也可以使用es6的字符串模板</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">str</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">dddd</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>a<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-数字类型\"><a href=\"#2-数字类型\" class=\"headerlink\" title=\"2.数字类型\"></a>2.数字类型</h3><p>支持十六进制、十进制、八进制和二进制；</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">notANumber</span><span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Nan</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">num</span><span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//普通数字</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">infinityNumber</span><span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//无穷大</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">decimal</span><span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//十进制</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">hex</span><span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0xf00d</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//十六进制</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">binary</span><span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0b1010</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//二进制</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">octal</span><span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0o744</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//八进制s</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-布尔类型\"><a href=\"#3-布尔类型\" class=\"headerlink\" title=\"3.布尔类型\"></a>3.布尔类型</h3><p>注意，使用构造函数 Boolean 创造的对象不是布尔值：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">createdBoolean</span><span class=\"token operator\">:</span> boolean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//这样会报错 应为事实上 new Boolean() 返回的是一个 Boolean 对象 </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p>事实上 new Boolean() 返回的是一个 Boolean 对象 需要改成</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">createdBoolean</span><span class=\"token operator\">:</span> Boolean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">booleand</span><span class=\"token operator\">:</span> boolean <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">//可以直接使用布尔值</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">booleand2</span><span class=\"token operator\">:</span> boolean <span class=\"token operator\">=</span> <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//也可以通过函数返回布尔值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-空值类型\"><a href=\"#4-空值类型\" class=\"headerlink\" title=\"4.空值类型\"></a>4.空值类型</h3><p>JavaScript 没有空值（Void）的概念，在 TypeScript 中，可以用 void 表示没有任何返回值的函数</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">voidFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test void'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>void 类型的用法，主要是用在我们不希望调用者关心函数返回值的情况下，比如通常的<strong>异步回调函数void也可以定义undefined 和 null类型</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">u</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">n</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>TIPS 注意：</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如果你配置了tsconfig.json 开启了严格模式</p>\n<p>{<br>    “compilerOptions”:{<br>        “strict”: true<br>    }<br>}<br> null 不能 赋予 void 类型 </p></blockquote>\n<h3 id=\"5-Null和undefined类型\"><a href=\"#5-Null和undefined类型\" class=\"headerlink\" title=\"5.Null和undefined类型\"></a>5.Null和undefined类型</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">u</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//定义undefined</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">n</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//定义null</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>void 和 undefined 和 null 最大的区别<br>与 void 的区别是，undefined 和 null 是所有类型的子类型。也就是说 undefined 类型的变量，可以赋值给 <strong>string</strong> 类型的变量：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//这样写会报错 void类型不可以分给其他类型</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">num2</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span>\n\nnum2 <span class=\"token operator\">=</span> test\n<span class=\"token comment\">//这样是没问题的</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">num2</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span>\n\nnum2 <span class=\"token operator\">=</span> test\n\n<span class=\"token comment\">//或者这样的</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">num2</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span>\n\nnum2 <span class=\"token operator\">=</span> test<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"任意类型\"><a href=\"#任意类型\" class=\"headerlink\" title=\"任意类型\"></a>任意类型</h2><h3 id=\"Any-类型-和-unknown-顶级类型\"><a href=\"#Any-类型-和-unknown-顶级类型\" class=\"headerlink\" title=\"Any 类型 和 unknown 顶级类型\"></a>Any 类型 和 unknown 顶级类型</h3><p>1.没有强制限定哪种类型，随时切换类型都可以 我们可以对 any 进行任何操作，不需要检查类型</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">anys</span><span class=\"token operator\">:</span>any <span class=\"token operator\">=</span> <span class=\"token number\">123</span>\nanys <span class=\"token operator\">=</span> <span class=\"token string\">'123'</span>\nanys <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>2.声明变量的时候没有指定任意类型默认为any</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> anys<span class=\"token punctuation\">;</span>\nanys <span class=\"token operator\">=</span> <span class=\"token string\">'123'</span>\nanys <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>3.弊端如果使用any 就失去了TS类型检测的作用</p>\n<p>4.TypeScript 3.0中引入的 unknown 类型也被认为是 top type ，但它更安全。与 any 一样，所有类型都可以分配给unknown</p>\n<p>unknow  unknow类型比any更加严格当你要使用any 的时候可以尝试使用unknow</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//unknown 可以定义任何类型的值</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">;</span>\n\nvalue <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// OK</span>\nvalue <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// OK</span>\nvalue <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// OK</span>\nvalue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// OK</span>\nvalue <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// OK</span>\nvalue <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// OK</span>\nvalue <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// OK</span>\nvalue <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"type\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// OK</span>\n\n<span class=\"token comment\">//这样写会报错unknow类型不能作为子类型只能作为父类型 any可以作为父类型和子类型</span>\n<span class=\"token comment\">//unknown类型不能赋值给其他类型</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">names</span><span class=\"token operator\">:</span>unknown <span class=\"token operator\">=</span> <span class=\"token string\">'123'</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">names2</span><span class=\"token operator\">:</span>string <span class=\"token operator\">=</span> names\n\n<span class=\"token comment\">//这样就没问题 any类型是可以的</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">names</span><span class=\"token operator\">:</span>any <span class=\"token operator\">=</span> <span class=\"token string\">'123'</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">names2</span><span class=\"token operator\">:</span>string <span class=\"token operator\">=</span> names   \n\n<span class=\"token comment\">//unknown可赋值对象只有unknown 和 any</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">bbb</span><span class=\"token operator\">:</span>unknown <span class=\"token operator\">=</span> <span class=\"token string\">'123'</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">aaa</span><span class=\"token operator\">:</span>any<span class=\"token operator\">=</span> <span class=\"token string\">'456'</span>\n\naaa <span class=\"token operator\">=</span> bbb<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>区别2</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">如果是any类型在对象没有这个属性的时候还在获取是不会报错的\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">obj</span><span class=\"token operator\">:</span>any <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span>\nobj<span class=\"token punctuation\">.</span>a\n\n如果是unknow 是不能调用属性和方法\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">obj</span><span class=\"token operator\">:</span>unknown <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">ccc</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token parameter\">number</span><span class=\"token operator\">=></span><span class=\"token number\">213</span><span class=\"token punctuation\">&#125;</span>\nobj<span class=\"token punctuation\">.</span>b\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">ccc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"接口和对象类型\"><a href=\"#接口和对象类型\" class=\"headerlink\" title=\"接口和对象类型\"></a>接口和对象类型</h2><h3 id=\"对象的类型\"><a href=\"#对象的类型\" class=\"headerlink\" title=\"对象的类型\"></a>对象的类型</h3><p>在typescript中，我们定义对象的方式要用关键字interface（接口），我的理解是使用interface来定义一种约束，让数据的结构满足约束的格式。定义方式如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//这样写是会报错的 因为我们在person定义了a，b但是对象里面缺少b属性</span>\n<span class=\"token comment\">//使用接口约束的时候不能多一个属性也不能少一个属性</span>\n<span class=\"token comment\">//必须与接口保持一致</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span>string<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span>string\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">person</span><span class=\"token operator\">:</span>Person  <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span><span class=\"token string\">\"213\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//重名interface  可以合并</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span>string<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span>number<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span><span class=\"token constant\">A</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'xx'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//继承</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span>string\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span>number\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">obj</span><span class=\"token operator\">:</span><span class=\"token constant\">B</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">\"string\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"可选属性-使用-操作符\"><a href=\"#可选属性-使用-操作符\" class=\"headerlink\" title=\"可选属性 使用?操作符\"></a>可选属性 使用?操作符</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//可选属性的含义是该属性可以不存在</span>\n<span class=\"token comment\">//所以说这样写也是没问题的</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n    b<span class=\"token operator\">?</span><span class=\"token operator\">:</span>string<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span>string\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">person</span><span class=\"token operator\">:</span>Person  <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span><span class=\"token string\">\"213\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"任意属性-propName-string\"><a href=\"#任意属性-propName-string\" class=\"headerlink\" title=\"任意属性 [propName: string]\"></a>任意属性 [propName: string]</h3><p><strong>需要注意的是，一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集</strong>：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//在这个例子当中我们看到接口中并没有定义C但是并没有报错</span>\n<span class=\"token comment\">//应为我们定义了[propName: string]: any;</span>\n<span class=\"token comment\">//允许添加新的任意属性</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n    b<span class=\"token operator\">?</span><span class=\"token operator\">:</span>string<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span>string<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>propName<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">person</span><span class=\"token operator\">:</span>Person  <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span><span class=\"token string\">\"213\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span><span class=\"token string\">\"123\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"只读属性-readonly\"><a href=\"#只读属性-readonly\" class=\"headerlink\" title=\"只读属性 readonly\"></a>只读属性 readonly</h3><p>readonly 只读属性是不允许被赋值的只能读取</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//这样写是会报错的</span>\n<span class=\"token comment\">//应为a是只读的不允许重新赋值</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n    b<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\n    readonly a<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>propName<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">person</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token string\">\"213\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token string\">\"123\"</span>\n<span class=\"token punctuation\">&#125;</span>\n\nperson<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"添加函数\"><a href=\"#添加函数\" class=\"headerlink\" title=\"添加函数\"></a>添加函数</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n    b<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\n    readonly a<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\n\n<span class=\"token punctuation\">[</span>propName<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function-variable function\">cb</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">person</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token string\">\"213\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">cb</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"数组类型\"><a href=\"#数组类型\" class=\"headerlink\" title=\"数组类型\"></a>数组类型</h2><h3 id=\"数组类型-1\"><a href=\"#数组类型-1\" class=\"headerlink\" title=\"数组类型\"></a>数组类型</h3><p>1.类型[ ] </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//类型加中括号</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">arr</span><span class=\"token operator\">:</span>number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">123</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">//这样会报错定义了数字类型出现字符串是不允许的</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">arr</span><span class=\"token operator\">:</span>number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">//操作方法添加也是不允许的</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">arr</span><span class=\"token operator\">:</span>number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token literal-property property\">arr</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//数字类型的数组</span>\n<span class=\"token keyword\">var</span> <span class=\"token literal-property property\">arr2</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//字符串类型的数组</span>\n<span class=\"token keyword\">var</span> <span class=\"token literal-property property\">arr3</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//任意类型的数组</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"数组泛型\"><a href=\"#数组泛型\" class=\"headerlink\" title=\"数组泛型\"></a>数组泛型</h3><p>规则 Array&lt;类型&gt;</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">arr</span><span class=\"token operator\">:</span>Array<span class=\"token operator\">&lt;</span>number<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"用接口表示数组\"><a href=\"#用接口表示数组\" class=\"headerlink\" title=\"用接口表示数组\"></a>用接口表示数组</h3><p>一般用来描述类数组 </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">NumberArray</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span>index<span class=\"token operator\">:</span> number<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">fibonacci</span><span class=\"token operator\">:</span> NumberArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//表示：只要索引的类型是数字时，那么值的类型必须是数字。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"多维数组\"><a href=\"#多维数组\" class=\"headerlink\" title=\"多维数组\"></a>多维数组</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span>number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h3 id=\"arguments类数组\"><a href=\"#arguments类数组\" class=\"headerlink\" title=\"arguments类数组\"></a>arguments类数组</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Arr</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span>any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//错误的arguments 是类数组不能这样定义</span>\n    <span class=\"token keyword\">let</span> <span class=\"token literal-property property\">arr</span><span class=\"token operator\">:</span>number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arguments\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">Arr</span><span class=\"token punctuation\">(</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">222</span><span class=\"token punctuation\">,</span> <span class=\"token number\">333</span><span class=\"token punctuation\">)</span>\n\n \n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Arr</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span>any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span> \n    <span class=\"token comment\">//ts内置对象IArguments 定义</span>\n    <span class=\"token keyword\">let</span> <span class=\"token literal-property property\">arr</span><span class=\"token operator\">:</span>IArguments <span class=\"token operator\">=</span> arguments\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">Arr</span><span class=\"token punctuation\">(</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">222</span><span class=\"token punctuation\">,</span> <span class=\"token number\">333</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//其中 IArguments 是 TypeScript 中定义好了的类型，它实际上就是：</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IArguments</span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token punctuation\">[</span>index<span class=\"token operator\">:</span> number<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">;</span>\n\n<span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token literal-property property\">callee</span><span class=\"token operator\">:</span> Function<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"any-在数组中的应用\"><a href=\"#any-在数组中的应用\" class=\"headerlink\" title=\"any 在数组中的应用\"></a>any 在数组中的应用</h3><p>一个常见的例子数组中可以存在任意类型</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">list</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"函数扩展\"><a href=\"#函数扩展\" class=\"headerlink\" title=\"函数扩展\"></a>函数扩展</h2><h3 id=\"函数的类型\"><a href=\"#函数的类型\" class=\"headerlink\" title=\"函数的类型\"></a>函数的类型</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//注意，参数不能多传，也不能少传 必须按照约定的类型来</span>\n<span class=\"token keyword\">const</span> fn <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span>number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">string</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> name <span class=\"token operator\">+</span> age\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"函数的可选参数\"><a href=\"#函数的可选参数\" class=\"headerlink\" title=\"函数的可选参数?\"></a>函数的可选参数?</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//通过?表示该参数为可选参数</span>\n<span class=\"token keyword\">const</span> fn <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> age<span class=\"token operator\">?</span><span class=\"token operator\">:</span>number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">string</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> name <span class=\"token operator\">+</span> age\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"函数参数的默认值\"><a href=\"#函数参数的默认值\" class=\"headerlink\" title=\"函数参数的默认值\"></a>函数参数的默认值</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fn <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">\"我是默认值\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">string</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> name\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"接口定义函数\"><a href=\"#接口定义函数\" class=\"headerlink\" title=\"接口定义函数\"></a>接口定义函数</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//定义参数 num 和 num2  ：后面定义返回值的类型</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Add</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">(</span>num<span class=\"token operator\">:</span>  number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">num2</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">fn</span><span class=\"token operator\">:</span> Add <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>num<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">num2</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">number</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> num <span class=\"token operator\">+</span> num2\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> User</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> User <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> user\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"定义剩余参数\"><a href=\"#定义剩余参数\" class=\"headerlink\" title=\"定义剩余参数\"></a>定义剩余参数</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fn <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>array<span class=\"token operator\">:</span>number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>items<span class=\"token operator\">:</span>any<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>any<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span>items<span class=\"token punctuation\">)</span>\n       <span class=\"token keyword\">return</span> items\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span>number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token string\">'4'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'5'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'6'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"函数重载\"><a href=\"#函数重载\" class=\"headerlink\" title=\"函数重载\"></a>函数重载</h3><p>重载是方法名字相同，而参数不同，返回类型可以相同也可以不同。</p>\n<p>如果参数类型不同，则参数类型应设置为 any。</p>\n<p>参数数量不同你可以将不同的参数设置为可选。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params2</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">,</span> params2<span class=\"token operator\">?</span><span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span>\n     \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>params2<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n \n\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">,</span><span class=\"token number\">456</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"类型断言-联合类型-交叉类型\"><a href=\"#类型断言-联合类型-交叉类型\" class=\"headerlink\" title=\"类型断言 | 联合类型 | 交叉类型\"></a>类型断言 | 联合类型 | 交叉类型</h2><h3 id=\"联合类型\"><a href=\"#联合类型\" class=\"headerlink\" title=\"联合类型\"></a>联合类型</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//例如我们的手机号通常是13XXXXXXX 为数字类型 这时候产品说需要支持座机</span>\n<span class=\"token comment\">//所以我们就可以使用联合类型支持座机字符串</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">myPhone</span><span class=\"token operator\">:</span> number <span class=\"token operator\">|</span> string  <span class=\"token operator\">=</span> <span class=\"token string\">'010-820'</span>\n\n\n<span class=\"token comment\">//这样写是会报错的应为我们的联合类型只有数字和字符串并没有布尔值</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">myPhone</span><span class=\"token operator\">:</span> number <span class=\"token operator\">|</span> string  <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>函数使用联合类型、</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fn <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>something<span class=\"token operator\">:</span>number <span class=\"token operator\">|</span> boolean<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token parameter\">boolean</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>something\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"交叉类型\"><a href=\"#交叉类型\" class=\"headerlink\" title=\"交叉类型\"></a>交叉类型</h3><p>多种类型的集合，联合对象将具有所联合类型的所有成员</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">People</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span>\n  height： number\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Man</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">sex</span><span class=\"token operator\">:</span> string\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">xiaoman</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">man</span><span class=\"token operator\">:</span> People <span class=\"token operator\">&amp;</span> Man</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>man<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>man<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>man<span class=\"token punctuation\">.</span>sex<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">xiaoman</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">180</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">sex</span><span class=\"token operator\">:</span> <span class=\"token string\">'male'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h3><p><strong>语法：值 as 类型　　或　　&lt;类型&gt;值  value as string  <string>value</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token literal-property property\">run</span><span class=\"token operator\">:</span> string\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token literal-property property\">build</span><span class=\"token operator\">:</span> string\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> fn <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>type<span class=\"token operator\">:</span> <span class=\"token constant\">A</span> <span class=\"token operator\">|</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">string</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span> type<span class=\"token punctuation\">.</span>run\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//这样写是有警告的应为B的接口上面是没有定义run这个属性的</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token literal-property property\">run</span><span class=\"token operator\">:</span> string\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token literal-property property\">build</span><span class=\"token operator\">:</span> string\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> fn <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>type<span class=\"token operator\">:</span> <span class=\"token constant\">A</span> <span class=\"token operator\">|</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">string</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>type <span class=\"token keyword\">as</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>run\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//可以使用类型断言来推断他传入的是A接口的值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>需要注意的是，类型断言只能够「欺骗」TypeScript 编译器，无法避免运行时的错误，反而滥用类型断言可能会导致运行时错误：</p>\n<h3 id=\"使用any临时断言\"><a href=\"#使用any临时断言\" class=\"headerlink\" title=\"使用any临时断言\"></a>使用any临时断言</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span>abc <span class=\"token operator\">=</span> <span class=\"token number\">123</span>\n<span class=\"token comment\">//这样写会报错因为window没有abc这个东西</span>\n<span class=\"token punctuation\">(</span>window <span class=\"token keyword\">as</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>abc <span class=\"token operator\">=</span> <span class=\"token number\">123</span>\n<span class=\"token comment\">//可以使用any临时断言在 any 类型的变量上，访问任何属性都是允许的。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"as-const\"><a href=\"#as-const\" class=\"headerlink\" title=\"as const\"></a>as const</h3><p>是对字面值的<strong>断言</strong>，与const直接定义常量是有区别的</p>\n<p>如果是普通类型跟直接const 声明是一样的</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> names <span class=\"token operator\">=</span> <span class=\"token string\">'小满'</span>\nnames <span class=\"token operator\">=</span> <span class=\"token string\">'aa'</span> <span class=\"token comment\">//无法修改</span>\n\n \n\n\n<span class=\"token keyword\">let</span> names2 <span class=\"token operator\">=</span> <span class=\"token string\">'小满'</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span>\nnames2 <span class=\"token operator\">=</span> <span class=\"token string\">'aa'</span> <span class=\"token comment\">//无法修改</span>\n<span class=\"token comment\">// 数组</span>\n<span class=\"token keyword\">let</span> a1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> a2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\na1<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误，此时已经断言字面量为[10, 20],数据无法做任何修改</span>\na2<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 通过，没有修改指针</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"类型断言是不具影响力的\"><a href=\"#类型断言是不具影响力的\" class=\"headerlink\" title=\"类型断言是不具影响力的\"></a>类型断言是不具影响力的</h3><p>在下面的例子中，将 something 断言为 boolean 虽然可以通过编译，但是并没有什么用 并不会影响结果, 因为编译过程中会删除类型断言</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">toBoolean</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">something</span><span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> boolean <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> something <span class=\"token keyword\">as</span> boolean<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">toBoolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 返回值为 1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"内置对象\"><a href=\"#内置对象\" class=\"headerlink\" title=\"内置对象\"></a>内置对象</h2><p>JavaScript 中有很多内置对象，它们可以直接在 TypeScript 中当做定义好了的类型。</p>\n<h3 id=\"ECMAScript-的内置对象\"><a href=\"#ECMAScript-的内置对象\" class=\"headerlink\" title=\"ECMAScript 的内置对象\"></a>ECMAScript 的内置对象</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Boolean、Number、string、RegExp、Date、Error\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> Boolean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">n</span><span class=\"token operator\">:</span> Number <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">s</span><span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'哔哩哔哩关注小满zs'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">d</span><span class=\"token operator\">:</span> Date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">r</span><span class=\"token operator\">:</span> RegExp <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^1</span><span class=\"token regex-delimiter\">/</span></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">e</span><span class=\"token operator\">:</span> Error <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error!\"</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"DOM-和-BOM-的内置对象\"><a href=\"#DOM-和-BOM-的内置对象\" class=\"headerlink\" title=\"DOM 和 BOM 的内置对象\"></a>DOM 和 BOM 的内置对象</h3><p><strong>Document、HTMLElement、Event、NodeList 等</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> HTMLElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">allDiv</span><span class=\"token operator\">:</span> NodeList <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//读取div 这种需要类型断言 或者加个判断应为读不到返回null</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">div</span><span class=\"token operator\">:</span>HTMLElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HTMLDivElement\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">e</span><span class=\"token operator\">:</span> MouseEvent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//dom元素的映射表</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">HTMLElementTagNameMap</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string-property property\">\"a\"</span><span class=\"token operator\">:</span> HTMLAnchorElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"abbr\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"address\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"applet\"</span><span class=\"token operator\">:</span> HTMLAppletElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"area\"</span><span class=\"token operator\">:</span> HTMLAreaElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"article\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"aside\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"audio\"</span><span class=\"token operator\">:</span> HTMLAudioElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"b\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"base\"</span><span class=\"token operator\">:</span> HTMLBaseElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"bdi\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"bdo\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"blockquote\"</span><span class=\"token operator\">:</span> HTMLQuoteElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"body\"</span><span class=\"token operator\">:</span> HTMLBodyElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"br\"</span><span class=\"token operator\">:</span> HTMLBRElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"button\"</span><span class=\"token operator\">:</span> HTMLButtonElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"canvas\"</span><span class=\"token operator\">:</span> HTMLCanvasElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"caption\"</span><span class=\"token operator\">:</span> HTMLTableCaptionElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"cite\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"code\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"col\"</span><span class=\"token operator\">:</span> HTMLTableColElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"colgroup\"</span><span class=\"token operator\">:</span> HTMLTableColElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"data\"</span><span class=\"token operator\">:</span> HTMLDataElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"datalist\"</span><span class=\"token operator\">:</span> HTMLDataListElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"dd\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"del\"</span><span class=\"token operator\">:</span> HTMLModElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"details\"</span><span class=\"token operator\">:</span> HTMLDetailsElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"dfn\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"dialog\"</span><span class=\"token operator\">:</span> HTMLDialogElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"dir\"</span><span class=\"token operator\">:</span> HTMLDirectoryElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"div\"</span><span class=\"token operator\">:</span> HTMLDivElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"dl\"</span><span class=\"token operator\">:</span> HTMLDListElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"dt\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"em\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"embed\"</span><span class=\"token operator\">:</span> HTMLEmbedElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"fieldset\"</span><span class=\"token operator\">:</span> HTMLFieldSetElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"figcaption\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"figure\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"font\"</span><span class=\"token operator\">:</span> HTMLFontElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"footer\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"form\"</span><span class=\"token operator\">:</span> HTMLFormElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"frame\"</span><span class=\"token operator\">:</span> HTMLFrameElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"frameset\"</span><span class=\"token operator\">:</span> HTMLFrameSetElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"h1\"</span><span class=\"token operator\">:</span> HTMLHeadingElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"h2\"</span><span class=\"token operator\">:</span> HTMLHeadingElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"h3\"</span><span class=\"token operator\">:</span> HTMLHeadingElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"h4\"</span><span class=\"token operator\">:</span> HTMLHeadingElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"h5\"</span><span class=\"token operator\">:</span> HTMLHeadingElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"h6\"</span><span class=\"token operator\">:</span> HTMLHeadingElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"head\"</span><span class=\"token operator\">:</span> HTMLHeadElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"header\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"hgroup\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"hr\"</span><span class=\"token operator\">:</span> HTMLHRElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"html\"</span><span class=\"token operator\">:</span> HTMLHtmlElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"i\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"iframe\"</span><span class=\"token operator\">:</span> HTMLIFrameElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"img\"</span><span class=\"token operator\">:</span> HTMLImageElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"input\"</span><span class=\"token operator\">:</span> HTMLInputElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"ins\"</span><span class=\"token operator\">:</span> HTMLModElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"kbd\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"label\"</span><span class=\"token operator\">:</span> HTMLLabelElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"legend\"</span><span class=\"token operator\">:</span> HTMLLegendElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"li\"</span><span class=\"token operator\">:</span> HTMLLIElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"link\"</span><span class=\"token operator\">:</span> HTMLLinkElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"main\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"map\"</span><span class=\"token operator\">:</span> HTMLMapElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"mark\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"marquee\"</span><span class=\"token operator\">:</span> HTMLMarqueeElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"menu\"</span><span class=\"token operator\">:</span> HTMLMenuElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"meta\"</span><span class=\"token operator\">:</span> HTMLMetaElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"meter\"</span><span class=\"token operator\">:</span> HTMLMeterElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"nav\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"noscript\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"object\"</span><span class=\"token operator\">:</span> HTMLObjectElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"ol\"</span><span class=\"token operator\">:</span> HTMLOListElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"optgroup\"</span><span class=\"token operator\">:</span> HTMLOptGroupElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"option\"</span><span class=\"token operator\">:</span> HTMLOptionElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"output\"</span><span class=\"token operator\">:</span> HTMLOutputElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"p\"</span><span class=\"token operator\">:</span> HTMLParagraphElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"param\"</span><span class=\"token operator\">:</span> HTMLParamElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"picture\"</span><span class=\"token operator\">:</span> HTMLPictureElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"pre\"</span><span class=\"token operator\">:</span> HTMLPreElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"progress\"</span><span class=\"token operator\">:</span> HTMLProgressElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"q\"</span><span class=\"token operator\">:</span> HTMLQuoteElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"rp\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"rt\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"ruby\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"s\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"samp\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"script\"</span><span class=\"token operator\">:</span> HTMLScriptElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"section\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"select\"</span><span class=\"token operator\">:</span> HTMLSelectElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"slot\"</span><span class=\"token operator\">:</span> HTMLSlotElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"small\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"source\"</span><span class=\"token operator\">:</span> HTMLSourceElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"span\"</span><span class=\"token operator\">:</span> HTMLSpanElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"strong\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"style\"</span><span class=\"token operator\">:</span> HTMLStyleElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"sub\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"summary\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"sup\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"table\"</span><span class=\"token operator\">:</span> HTMLTableElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"tbody\"</span><span class=\"token operator\">:</span> HTMLTableSectionElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"td\"</span><span class=\"token operator\">:</span> HTMLTableDataCellElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"template\"</span><span class=\"token operator\">:</span> HTMLTemplateElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"textarea\"</span><span class=\"token operator\">:</span> HTMLTextAreaElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"tfoot\"</span><span class=\"token operator\">:</span> HTMLTableSectionElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"th\"</span><span class=\"token operator\">:</span> HTMLTableHeaderCellElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"thead\"</span><span class=\"token operator\">:</span> HTMLTableSectionElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"time\"</span><span class=\"token operator\">:</span> HTMLTimeElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"title\"</span><span class=\"token operator\">:</span> HTMLTitleElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"tr\"</span><span class=\"token operator\">:</span> HTMLTableRowElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"track\"</span><span class=\"token operator\">:</span> HTMLTrackElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"u\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"ul\"</span><span class=\"token operator\">:</span> HTMLUListElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"var\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"video\"</span><span class=\"token operator\">:</span> HTMLVideoElement<span class=\"token punctuation\">;</span>\n    <span class=\"token string-property property\">\"wbr\"</span><span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"元组类型\"><a href=\"#元组类型\" class=\"headerlink\" title=\"元组类型\"></a>元组类型</h2><p>如果需要一个固定大小的不同类型值的集合，我们需要使用元组。 </p>\n<h3 id=\"元组就是数组的变种\"><a href=\"#元组就是数组的变种\" class=\"headerlink\" title=\"元组就是数组的变种\"></a>元组就是数组的变种</h3><p><strong>元组（Tuple）是固定数量的不同类型的元素的组合。</strong></p>\n<p>元组与集合的不同之处在于，元组中的元素类型可以是不同的，而且数量固定。元组的好处在于可以把多个元素作为一个单元传递。如果一个方法需要返回多个值，可以把这多个值作为元组返回，而不需要创建额外的类来表示。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">arr</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">,</span>string<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'string'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">arr2</span><span class=\"token operator\">:</span> readonly <span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">,</span>boolean<span class=\"token punctuation\">,</span>string<span class=\"token punctuation\">,</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token string\">'sring'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>当赋值或访问一个已知索引的元素时，会得到正确的类型：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">arr</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">,</span>string<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'string'</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token comment\">//error</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token comment\">//success</span>\n\n<span class=\"token comment\">//数字是没有length 的</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"越界元素\"><a href=\"#越界元素\" class=\"headerlink\" title=\"越界元素\"></a>越界元素</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">arr</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">,</span>string<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'string'</span><span class=\"token punctuation\">]</span>\n\narr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//error</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>对于越界的元素他的类型被限制为 联合类型（就是你在元组中定义的类型）</p>\n<h3 id=\"应用场景-例如定义excel返回的数据\"><a href=\"#应用场景-例如定义excel返回的数据\" class=\"headerlink\" title=\"应用场景 例如定义excel返回的数据\"></a>应用场景 例如定义excel返回的数据</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">excel</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>string<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'123'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'123'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'123'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'123'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'123'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"枚举类型\"><a href=\"#枚举类型\" class=\"headerlink\" title=\"枚举类型\"></a>枚举类型</h2><p>在javaScript中是没有枚举的概念的TS帮我们定义了枚举这个类型</p>\n<p><strong>使用枚举 通过enum关键字定义我们的枚举</strong></p>\n<h3 id=\"1-数字枚举\"><a href=\"#1-数字枚举\" class=\"headerlink\" title=\"1.数字枚举\"></a>1.数字枚举</h3><p>例如 红绿蓝 Red = 0 Green = 1 Blue= 2 分别代表红色0 绿色为1 蓝色为2</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">enum</span> Types<span class=\"token punctuation\">&#123;</span>\n   Red<span class=\"token punctuation\">,</span>\n   Green<span class=\"token punctuation\">,</span>\n   BLue\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样写就可以实现应为ts定义的枚举中的每一个组员默认都是从0开始的所以也就是</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">enum</span> Types<span class=\"token punctuation\">&#123;</span>\n   Red <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n   Green <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n   BLue <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//默认就是从0开始的 可以不写值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>增长枚举</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">enum</span> Types<span class=\"token punctuation\">&#123;</span>\n   Red <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n   Green<span class=\"token punctuation\">,</span>\n   BLue\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如上，我们定义了一个数字枚举， Red使用初始化为 1。 其余的成员会从 1开始自动增长。 换句话说， Type.Red的值为 1， Green为 2， Blue为 3。</p>\n<h3 id=\"2-字符串枚举\"><a href=\"#2-字符串枚举\" class=\"headerlink\" title=\"2.字符串枚举\"></a>2.字符串枚举</h3><p>字符串枚举的概念很简单。 在一个字符串枚举里，每个成员都必须用字符串字面量，或另外一个字符串枚举成员进行初始化。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">enum</span> Types<span class=\"token punctuation\">&#123;</span>\n   Red <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span>\n   Green <span class=\"token operator\">=</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span>\n   BLue <span class=\"token operator\">=</span> <span class=\"token string\">'blue'</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>由于字符串枚举没有自增长的行为，字符串枚举可以很好的序列化。 换句话说，如果你正在调试并且必须要读一个数字枚举的运行时的值，这个值通常是很难读的 - 它并不能表达有用的信息，字符串枚举允许你提供一个运行时有意义的并且可读的值，独立于枚举成员的名字。</p>\n<h3 id=\"3-异构枚举\"><a href=\"#3-异构枚举\" class=\"headerlink\" title=\"3.异构枚举\"></a>3.异构枚举</h3><p>枚举可以混合字符串和数字成员</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">enum</span> Types<span class=\"token punctuation\">&#123;</span>\n   No <span class=\"token operator\">=</span> <span class=\"token string\">\"No\"</span><span class=\"token punctuation\">,</span>\n   Yes <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-接口枚举\"><a href=\"#4-接口枚举\" class=\"headerlink\" title=\"4.接口枚举\"></a>4.接口枚举</h3><p>定义一个枚举Types 定义一个接口A 他有一个属性red 值为Types.yyds</p>\n<p>声明对象的时候要遵循这个规则</p>\n <pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">enum</span> Types <span class=\"token punctuation\">&#123;</span>\n    yyds<span class=\"token punctuation\">,</span>\n    dddd\n <span class=\"token punctuation\">&#125;</span>\n <span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token punctuation\">&#123;</span>\n    red<span class=\"token operator\">:</span>Types<span class=\"token punctuation\">.</span>yyds\n <span class=\"token punctuation\">&#125;</span>\n \n <span class=\"token keyword\">let</span> obj<span class=\"token operator\">:</span><span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    red<span class=\"token operator\">:</span>Types<span class=\"token punctuation\">.</span>yyds\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"5-const枚举\"><a href=\"#5-const枚举\" class=\"headerlink\" title=\"5.const枚举\"></a>5.const枚举</h3><p>let  和 var 都是不允许的声明只能使用const</p>\n<p>大多数情况下，枚举是十分有效的方案。 然而在某些情况下需求很严格。 为了避免在额外生成的代码上的开销和额外的非直接的对枚举成员的访问，我们可以使用 const枚举。 常量枚举通过在枚举上使用 const修饰符来定义</p>\n<p>const 声明的枚举会被编译成常量</p>\n<p>普通声明的枚举编译完后是个对象</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">enum</span> Types<span class=\"token punctuation\">&#123;</span>\n   No <span class=\"token operator\">=</span> <span class=\"token string\">\"No\"</span><span class=\"token punctuation\">,</span>\n   Yes <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"6-反向映射\"><a href=\"#6-反向映射\" class=\"headerlink\" title=\"6.反向映射\"></a>6.反向映射</h3><p>它包含了正向映射（ name -&gt; value）和反向映射（ value -&gt; name）</p>\n<p>要注意的是 不会为字符串枚举成员生成反向映射。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">enum</span> Enum <span class=\"token punctuation\">&#123;</span>\n   fall\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> Enum<span class=\"token punctuation\">.</span>fall<span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//0</span>\n<span class=\"token keyword\">let</span> nameOfA <span class=\"token operator\">=</span> Enum<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>nameOfA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//fall</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"never类型\"><a href=\"#never类型\" class=\"headerlink\" title=\"never类型\"></a>never类型</h2><p>TypeScript 将使用 never 类型来表示不应该存在的状态(很抽象是不是)</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// 返回never的函数必须存在无法达到的终点</span>\n\n<span class=\"token comment\">// 因为必定抛出异常，所以 error 将不会有返回值</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 因为存在死循环，所以 loop 将不会有返回值</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">loop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"never-与-void-的差异\"><a href=\"#never-与-void-的差异\" class=\"headerlink\" title=\"never 与 void 的差异\"></a>never 与 void 的差异</h3><pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token comment\">//void类型只是没有返回值 但本身不会出错</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Void</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//只会抛出异常没有返回值</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Never</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">never</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aaa'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"never-类型的一个应用场景\"><a href=\"#never-类型的一个应用场景\" class=\"headerlink\" title=\"never 类型的一个应用场景\"></a>never 类型的一个应用场景</h3><p>举一个我们可能会见到的例子</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token punctuation\">&#123;</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token punctuation\">&#123;</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">\"bar\"</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">All</span> <span class=\"token operator\">=</span> <span class=\"token constant\">A</span> <span class=\"token operator\">|</span> <span class=\"token constant\">B</span> <span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">handleValue</span><span class=\"token punctuation\">(</span>val<span class=\"token operator\">:</span> All<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'foo'</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'bar'</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">break</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            <span class=\"token comment\">//兜底逻辑 一般是不会进入这儿如果进来了就是程序异常了</span>\n            \n\n            <span class=\"token keyword\">const</span> exhaustiveCheck<span class=\"token operator\">:</span><span class=\"token builtin\">never</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>比如新来了一个同事他新增了一个C接口，我们必须手动找到所有 switch 代码并处理，否则将有可能引入 BUG 。</p>\n<p>而且这将是一个“隐蔽型”的BUG，如果回归面不够广，很难发现此类BUG。</p>\n<p>那 TS 有没有办法帮助我们在类型检查阶段发现这个问题呢？</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token punctuation\">&#123;</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token punctuation\">&#123;</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">\"bar\"</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token punctuation\">&#123;</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">\"bizz\"</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">All</span> <span class=\"token operator\">=</span> <span class=\"token constant\">A</span> <span class=\"token operator\">|</span> <span class=\"token constant\">B</span> <span class=\"token operator\">|</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">handleValue</span><span class=\"token punctuation\">(</span>val<span class=\"token operator\">:</span> All<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'foo'</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'bar'</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">break</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            <span class=\"token comment\">//兜底逻辑 一般是不会进入这儿如果进来了就是程序异常了</span>\n\t\t<span class=\"token keyword\">const</span> exhaustiveCheck<span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>由于任何类型都不能赋值给 never 类型的变量，所以当存在进入 default 分支的可能性时，TS的类型检查会及时帮我们发现这个问题</p>\n<h2 id=\"Symbol\"><a href=\"#Symbol\" class=\"headerlink\" title=\"Symbol\"></a>Symbol</h2><p><strong>自ECMAScript 2015起，symbol成为了一种新的原生类型，就像number和string一样。</strong><br><strong>symbol类型的值是通过Symbol构造函数创建的。</strong></p>\n<p>可以传递参做为唯一标识 只支持 <strong>string</strong> 和 <strong>number</strong>类型的参数</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> sym1 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> sym2 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 可选的字符串key</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"Symbol的值是唯一的\"><a href=\"#Symbol的值是唯一的\" class=\"headerlink\" title=\"Symbol的值是唯一的\"></a>Symbol的值是唯一的</h3><pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> s1 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> s2 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// s1 === s2 =>false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"用作对象属性的键\"><a href=\"#用作对象属性的键\" class=\"headerlink\" title=\"用作对象属性的键\"></a>用作对象属性的键</h3><pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> sym <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span>sym<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token string\">\"value\"</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>sym<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"value\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>使用symbol定义的属性，是不能通过如下方式遍历拿到的</strong></p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> symbol1 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'666'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> symbol2 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'777'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> obj1<span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token punctuation\">[</span>symbol1<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token string\">'小满'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span>symbol2<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token string\">'二蛋'</span><span class=\"token punctuation\">,</span>\n\n   age<span class=\"token operator\">:</span> <span class=\"token number\">19</span><span class=\"token punctuation\">,</span>\n   sex<span class=\"token operator\">:</span> <span class=\"token string\">'女'</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 1 for in 遍历</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> obj1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">// 注意在console看key,是不是没有遍历到symbol1</span>\n   <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 2 Object.keys 遍历</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 3 getOwnPropertyNames</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 4 JSON.stringfy</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如何拿到</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// 1 拿到具体的symbol 属性,对象中有几个就会拿到几个</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertySymbols</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertySymbols</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 2 es6 的 Reflect 拿到对象的所有属性</span>\nReflect<span class=\"token punctuation\">.</span><span class=\"token function\">ownKeys</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ownKeys</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"Symbol-iterator-迭代器-和-生成器-for-of\"><a href=\"#Symbol-iterator-迭代器-和-生成器-for-of\" class=\"headerlink\" title=\"Symbol.iterator 迭代器 和 生成器 for of\"></a>Symbol.iterator 迭代器 和 生成器 for of</h3><p>支持遍历大部分类型迭代器 arr nodeList argumetns set map 等</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> iterator <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//&#123; value: 1, done: false &#125;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//&#123; value: 2, done: false &#125;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//&#123; value: 3, done: false &#125;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//&#123; value: 4, done: false &#125;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//&#123; value: undefined, done: true &#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>测试用例</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Item</span> <span class=\"token punctuation\">&#123;</span>\n    age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> array<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>Item<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> age<span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> age<span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"2\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> age<span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"3\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">mapTypes</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span>\n<span class=\"token keyword\">const</span> map<span class=\"token operator\">:</span>Map<span class=\"token operator\">&lt;</span>mapTypes<span class=\"token punctuation\">,</span>mapTypes<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'王爷'</span><span class=\"token punctuation\">)</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'陆北'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    aaa<span class=\"token operator\">:</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n    bbb<span class=\"token operator\">:</span><span class=\"token number\">456</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> set<span class=\"token operator\">:</span>Set<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// let it:Iterator&lt;Item> = array[Symbol.iterator]()</span>\n<span class=\"token keyword\">const</span> gen <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>erg<span class=\"token operator\">:</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> it<span class=\"token operator\">:</span> Iterator<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> erg<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> next<span class=\"token operator\">:</span><span class=\"token builtin\">any</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> done<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>next<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        next <span class=\"token operator\">=</span>  it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>next<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">gen</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以下为这些symbols的列表：</p>\n<p><strong>Symbol.hasInstance</strong><br>方法，会被instanceof运算符调用。构造器对象用来识别一个对象是否是其实例。</p>\n<p><strong>Symbol.isConcatSpreadable</strong><br>布尔值，表示当在一个对象上调用Array.prototype.concat时，这个对象的数组元素是否可展开。</p>\n<p><strong>Symbol.iterator</strong><br>方法，被for-of语句调用。返回对象的默认迭代器。</p>\n<p><strong>Symbol.match</strong><br>方法，被String.prototype.match调用。正则表达式用来匹配字符串。</p>\n<p><strong>Symbol.replace</strong><br>方法，被String.prototype.replace调用。正则表达式用来替换字符串中匹配的子串。</p>\n<p><strong>Symbol.search</strong><br>方法，被String.prototype.search调用。正则表达式返回被匹配部分在字符串中的索引。</p>\n<p><strong>Symbol.species</strong><br>函数值，为一个构造函数。用来创建派生对象。</p>\n<p><strong>Symbol.split</strong><br>方法，被String.prototype.split调用。正则表达式来用分割字符串。</p>\n<p><strong>Symbol.toPrimitive</strong><br>方法，被ToPrimitive抽象操作调用。把对象转换为相应的原始值。</p>\n<p><strong>Symbol.toStringTag</strong><br>方法，被内置方法Object.prototype.toString调用。返回创建对象时默认的字符串描述。</p>\n<p><strong>Symbol.unscopables</strong><br>对象，它自己拥有的属性会被with作用域排除在外。</p>\n","feature":false,"text":"基础数据类型TS是JS的超集，所以JS基础的类型都包含在内 起步安装 npm install typescript -g 运行tsc 文件名 基础类型：Boolean、Number、String、null、undefined 以及 ES6 的 Symbol 和 ES10 的 Bi...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[{"name":"TypeScript","slug":"TypeScript","count":4,"path":"api/categories/TypeScript.json"}],"tags":[{"name":"TypeScript","slug":"TypeScript","count":4,"path":"api/tags/TypeScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">基础数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">1.字符串类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">2.数字类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%B8%83%E5%B0%94%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">3.布尔类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E7%A9%BA%E5%80%BC%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">4.空值类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-Null%E5%92%8Cundefined%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">5.Null和undefined类型</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%BB%E6%84%8F%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">任意类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Any-%E7%B1%BB%E5%9E%8B-%E5%92%8C-unknown-%E9%A1%B6%E7%BA%A7%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">Any 类型 和 unknown 顶级类型</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">接口和对象类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">对象的类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E9%80%89%E5%B1%9E%E6%80%A7-%E4%BD%BF%E7%94%A8-%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">可选属性 使用?操作符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%BB%E6%84%8F%E5%B1%9E%E6%80%A7-propName-string\"><span class=\"toc-text\">任意属性 [propName: string]</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%AA%E8%AF%BB%E5%B1%9E%E6%80%A7-readonly\"><span class=\"toc-text\">只读属性 readonly</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B7%BB%E5%8A%A0%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">添加函数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">数组类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B-1\"><span class=\"toc-text\">数组类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E6%B3%9B%E5%9E%8B\"><span class=\"toc-text\">数组泛型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%8E%A5%E5%8F%A3%E8%A1%A8%E7%A4%BA%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">用接口表示数组</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">多维数组</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#arguments%E7%B1%BB%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">arguments类数组</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#any-%E5%9C%A8%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">any 在数组中的应用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E6%89%A9%E5%B1%95\"><span class=\"toc-text\">函数扩展</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E7%9A%84%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">函数的类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%AF%E9%80%89%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">函数的可选参数?</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%9A%84%E9%BB%98%E8%AE%A4%E5%80%BC\"><span class=\"toc-text\">函数参数的默认值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">接口定义函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89%E5%89%A9%E4%BD%99%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">定义剩余参数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD\"><span class=\"toc-text\">函数重载</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80-%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B-%E4%BA%A4%E5%8F%89%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">类型断言 | 联合类型 | 交叉类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">联合类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%A4%E5%8F%89%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">交叉类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80\"><span class=\"toc-text\">类型断言</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8any%E4%B8%B4%E6%97%B6%E6%96%AD%E8%A8%80\"><span class=\"toc-text\">使用any临时断言</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#as-const\"><span class=\"toc-text\">as const</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80%E6%98%AF%E4%B8%8D%E5%85%B7%E5%BD%B1%E5%93%8D%E5%8A%9B%E7%9A%84\"><span class=\"toc-text\">类型断言是不具影响力的</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">内置对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ECMAScript-%E7%9A%84%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">ECMAScript 的内置对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DOM-%E5%92%8C-BOM-%E7%9A%84%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">DOM 和 BOM 的内置对象</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%83%E7%BB%84%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">元组类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%83%E7%BB%84%E5%B0%B1%E6%98%AF%E6%95%B0%E7%BB%84%E7%9A%84%E5%8F%98%E7%A7%8D\"><span class=\"toc-text\">元组就是数组的变种</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B6%8A%E7%95%8C%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">越界元素</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-%E4%BE%8B%E5%A6%82%E5%AE%9A%E4%B9%89excel%E8%BF%94%E5%9B%9E%E7%9A%84%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">应用场景 例如定义excel返回的数据</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">枚举类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%95%B0%E5%AD%97%E6%9E%9A%E4%B8%BE\"><span class=\"toc-text\">1.数字枚举</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9E%9A%E4%B8%BE\"><span class=\"toc-text\">2.字符串枚举</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%BC%82%E6%9E%84%E6%9E%9A%E4%B8%BE\"><span class=\"toc-text\">3.异构枚举</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%8E%A5%E5%8F%A3%E6%9E%9A%E4%B8%BE\"><span class=\"toc-text\">4.接口枚举</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-const%E6%9E%9A%E4%B8%BE\"><span class=\"toc-text\">5.const枚举</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E5%8F%8D%E5%90%91%E6%98%A0%E5%B0%84\"><span class=\"toc-text\">6.反向映射</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#never%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">never类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#never-%E4%B8%8E-void-%E7%9A%84%E5%B7%AE%E5%BC%82\"><span class=\"toc-text\">never 与 void 的差异</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#never-%E7%B1%BB%E5%9E%8B%E7%9A%84%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">never 类型的一个应用场景</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Symbol\"><span class=\"toc-text\">Symbol</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Symbol%E7%9A%84%E5%80%BC%E6%98%AF%E5%94%AF%E4%B8%80%E7%9A%84\"><span class=\"toc-text\">Symbol的值是唯一的</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%A8%E4%BD%9C%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E7%9A%84%E9%94%AE\"><span class=\"toc-text\">用作对象属性的键</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Symbol-iterator-%E8%BF%AD%E4%BB%A3%E5%99%A8-%E5%92%8C-%E7%94%9F%E6%88%90%E5%99%A8-for-of\"><span class=\"toc-text\">Symbol.iterator 迭代器 和 生成器 for of</span></a></li></ol></li></ol>","author":{"name":"chenin","slug":"chenin","avatar":"/img/touxiang.jpg","link":"https://github.com/Ccc946","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/Ccc946","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"typescript类（class）","uid":"5a8039b09f9d80d73cfaed9ef95a24ec","slug":"TypeScript/02.typescript类（class）","date":"2023-02-05T11:30:32.000Z","updated":"2023-02-05T15:29:07.854Z","comments":true,"path":"api/articles/TypeScript/02.typescript类（class）.json","keywords":null,"cover":"../img/default-cover.jpg","text":"ES6提供了更接近传统语言的写法，引入了Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。基本上，ES6的class可以看作只是一个语法糖，它的绝大部分功能，ES5都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。上...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"TypeScript","slug":"TypeScript","count":4,"path":"api/categories/TypeScript.json"}],"tags":[{"name":"TypeScript","slug":"TypeScript","count":4,"path":"api/tags/TypeScript.json"}],"author":{"name":"chenin","slug":"chenin","avatar":"/img/touxiang.jpg","link":"https://github.com/Ccc946","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/Ccc946","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"WebStorm 2019.3.1激活码","uid":"6cfd9c2293bfbcc79930156aac5124e0","slug":"WebStorm","date":"2021-04-21T13:42:00.000Z","updated":"2023-02-04T04:04:55.657Z","comments":true,"path":"api/articles/WebStorm.json","keywords":null,"cover":"../img/webstorm/sdg415gd5s.png","text":"下面正式开始激活（WebStorm 2019.3.1版） WebStorm 资源链接：https://pan.baidu.com/s/1UibJECYNiFuJrG2l89c-xw 提取码：w8y7。 jetbrains-agent 资源链接：http://note.youdao...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"软件工具","slug":"软件工具","count":1,"path":"api/categories/软件工具.json"}],"tags":[{"name":"WebStorm","slug":"WebStorm","count":1,"path":"api/tags/WebStorm.json"},{"name":"软件激活","slug":"软件激活","count":1,"path":"api/tags/软件激活.json"}],"author":{"name":"chenin","slug":"chenin","avatar":"/img/touxiang.jpg","link":"https://github.com/Ccc946","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/Ccc946","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false}}