{"title":"typescript类（class）","uid":"5a8039b09f9d80d73cfaed9ef95a24ec","slug":"TypeScript/02.typescript类（class）","date":"2023-02-05T11:30:32.000Z","updated":"2023-02-05T15:29:07.854Z","comments":true,"path":"api/articles/TypeScript/02.typescript类（class）.json","keywords":null,"cover":"../img/default-cover.jpg","content":"<p>ES6提供了更接近传统语言的写法，引入了Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。基本上，ES6的class可以看作只是一个<strong>语法糖</strong>，它的绝大部分功能，ES5都可以做到，新的class写法只是让对象原型的写法更加清晰、更像<strong>面向对象编程</strong>的语法而已。上面的代码用ES6的“类”改写，就是下面这样。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token comment\">//定义类</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">run</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"1-如何定义类\"><a href=\"#1-如何定义类\" class=\"headerlink\" title=\"1.如何定义类\"></a>1.如何定义类</h3><p>在TypeScript是不允许直接在constructor 定义变量的 需要在constructor上面先声明</p>\n<p><img src=\"C:\\Users\\chenin\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230205232256851.png\" alt=\"image-20230205232256851\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/a5f9ca6e2bcc48738d59b816acf79b52.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"img\"></p>\n<p>这样引发了第二个问题你如果了定义了变量不用 也会报错 通常是给个默认值 或者 进行赋值</p>\n<p><img src=\"https://img-blog.csdnimg.cn/48c2c425bc1c47599557a8103ff30b83.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"img\"></p>\n<h3 id=\"2-类的修饰符\"><a href=\"#2-类的修饰符\" class=\"headerlink\" title=\"2.类的修饰符\"></a>2.类的修饰符</h3><p><strong>总共有三个 public private protected</strong></p>\n<p>使用public 修饰符 可以让你定义的变量 内部访问 也可以外部访问 如果不写默认就是public</p>\n<p>使用  private 修饰符 代表定义的变量私有的只能在内部访问 不能在外部访问</p>\n<p>使用  protected 修饰符 代表定义的变量私有的只能在<strong>内部和继承的子类</strong>中访问 不能在外部访问</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span>\n    <span class=\"token keyword\">private</span> age<span class=\"token operator\">:</span><span class=\"token builtin\">number</span> \n    <span class=\"token keyword\">protected</span> some<span class=\"token operator\">:</span><span class=\"token builtin\">any</span>\n    <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>ages<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>some<span class=\"token operator\">:</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n       <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> ages\n       <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>some <span class=\"token operator\">=</span> some\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">run</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Man</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>some<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">create</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>some<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> xiaoman <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'小满'</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> man <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Man</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nman<span class=\"token punctuation\">.</span>some<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"3-static-静态属性-和-静态方法\"><a href=\"#3-static-静态属性-和-静态方法\" class=\"headerlink\" title=\"3.static 静态属性 和 静态方法\"></a>3.static 静态属性 和 静态方法</h3><p><img src=\"https://img-blog.csdnimg.cn/dd66b961270146ada29a9525d750feeb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"img\"></p>\n<p>我们用static 定义的属性 不可以通过this 去访问 只能通过类名去调用</p>\n<p><img src=\"https://img-blog.csdnimg.cn/0e398a1e6ad7452a8d607821e3969bdf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"img\"></p>\n<p>static 静态函数 同样也是不能通过this 去调用 也是通过类名去调用</p>\n<p><img src=\"https://img-blog.csdnimg.cn/a6bdc54f0e9140ebafdcb6b0568c164a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"img\"></p>\n<p>需注意： 如果两个函数都是static 静态的是可以通过this互相调用</p>\n<p><img src=\"https://img-blog.csdnimg.cn/77712c790646400ba121cb061994a762.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"img\"></p>\n<h3 id=\"4-interface-定义类\"><a href=\"#4-interface-定义类\" class=\"headerlink\" title=\"4.interface 定义类\"></a>4.interface 定义类</h3><p> ts interface 定义类 使用关键字 <strong>implements</strong>   后面跟interface的名字多个用逗号隔开 继承还是用extends</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">PersonClass</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">PersonClass2</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span>\n    asd<span class=\"token operator\">:</span><span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token punctuation\">&#123;</span>\n    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"123\"</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">PersonClass</span><span class=\"token punctuation\">,</span>PersonClass2 <span class=\"token punctuation\">&#123;</span>\n    asd<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>asd <span class=\"token operator\">=</span> <span class=\"token string\">'123'</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> type\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">set</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"5-抽象类\"><a href=\"#5-抽象类\" class=\"headerlink\" title=\"5.抽象类\"></a>5.抽象类</h3><p>应用场景如果你写的类实例化之后毫无用处此时我可以把他定义为抽象类</p>\n<p>或者你也可以把他作为一个基类-&gt; 通过继承一个派生类去实现基类的一些方法</p>\n<p>我们看例子</p>\n<p>下面这段代码会报错抽象类无法被实例化</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">public</span> name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>例子2</p>\n<p>我们在A类定义了 getName 抽象方法但为实现</p>\n<p>我们B类实现了A定义的抽象方法 如不实现就不报错 <strong>我们定义的抽象方法必须在派生类实现</strong></p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token punctuation\">&#123;</span>\n   name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n   <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token keyword\">abstract</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token string\">'小满'</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","feature":true,"text":"ES6提供了更接近传统语言的写法，引入了Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。基本上，ES6的class可以看作只是一个语法糖，它的绝大部分功能，ES5都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。上...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"TypeScript","slug":"TypeScript","count":4,"path":"api/categories/TypeScript.json"}],"tags":[{"name":"TypeScript","slug":"TypeScript","count":4,"path":"api/tags/TypeScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%A6%82%E4%BD%95%E5%AE%9A%E4%B9%89%E7%B1%BB\"><span class=\"toc-text\">1.如何定义类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E7%B1%BB%E7%9A%84%E4%BF%AE%E9%A5%B0%E7%AC%A6\"><span class=\"toc-text\">2.类的修饰符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-static-%E9%9D%99%E6%80%81%E5%B1%9E%E6%80%A7-%E5%92%8C-%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">3.static 静态属性 和 静态方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-interface-%E5%AE%9A%E4%B9%89%E7%B1%BB\"><span class=\"toc-text\">4.interface 定义类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%8A%BD%E8%B1%A1%E7%B1%BB\"><span class=\"toc-text\">5.抽象类</span></a></li></ol>","author":{"name":"chenin","slug":"chenin","avatar":"/img/touxiang.jpg","link":"https://github.com/Ccc946","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/Ccc946","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"typescript类型推论|类型别名","uid":"938498ff41c16e6a4fcfa03c651941dd","slug":"TypeScript/03.typescript类型推论","date":"2023-02-05T14:49:56.000Z","updated":"2023-02-05T15:41:06.537Z","comments":true,"path":"api/articles/TypeScript/03.typescript类型推论.json","keywords":null,"cover":"../img/default-cover.jpg","text":"TypeScript里的类型推论。即，类型是在哪里如何被推断的。 基础TypeScript里，在有些没有明确指出类型的地方，类型推论会帮助提供类型。如下面的例子 let x = 3; 变量x的类型被推断为数字。 这种推断发生在初始化变量和成员，设置默认参数值和决定函数返回值时。 ...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"TypeScript","slug":"TypeScript","count":4,"path":"api/categories/TypeScript.json"}],"tags":[{"name":"TypeScript","slug":"TypeScript","count":4,"path":"api/tags/TypeScript.json"}],"author":{"name":"chenin","slug":"chenin","avatar":"/img/touxiang.jpg","link":"https://github.com/Ccc946","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/Ccc946","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"typescript数据类型","uid":"92b2261d7a01551b4d1eedb33cf3ba36","slug":"TypeScript/01.typescript数据类型","date":"2023-02-04T05:49:52.000Z","updated":"2023-02-05T15:35:39.603Z","comments":true,"path":"api/articles/TypeScript/01.typescript数据类型.json","keywords":null,"cover":"../img/default-cover.jpg","text":"基础数据类型TS是JS的超集，所以JS基础的类型都包含在内 起步安装 npm install typescript -g 运行tsc 文件名 基础类型：Boolean、Number、String、null、undefined 以及 ES6 的 Symbol 和 ES10 的 Bi...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[{"name":"TypeScript","slug":"TypeScript","count":4,"path":"api/categories/TypeScript.json"}],"tags":[{"name":"TypeScript","slug":"TypeScript","count":4,"path":"api/tags/TypeScript.json"}],"author":{"name":"chenin","slug":"chenin","avatar":"/img/touxiang.jpg","link":"https://github.com/Ccc946","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/Ccc946","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false}}