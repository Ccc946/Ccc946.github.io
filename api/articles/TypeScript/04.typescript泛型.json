{"title":"typescript泛型","uid":"520b2e36f5b7d18dabaa9ecbe26ea061","slug":"TypeScript/04.typescript泛型","date":"2023-02-05T15:20:06.000Z","updated":"2023-02-05T15:54:20.569Z","comments":true,"path":"api/articles/TypeScript/04.typescript泛型.json","keywords":null,"cover":"../img/u=3648235042,1573336415&fm=253&fmt=auto&app=138&f=PNG.webp","content":"<p>泛型在TypeScript 是很重要的东西 例如vue3 是用ts编写的 里面用到了非常多的泛型</p>\n<p>ok:我们看一个小例子</p>\n<h3 id=\"函数泛型\"><a href=\"#函数泛型\" class=\"headerlink\" title=\"函数泛型\"></a>函数泛型</h3><p>我写了两个函数一个是数字类型的函数，另一个是字符串类型的函数,其实就是类型不同，</p>\n<p>实现的功能是一样的，这时候我们就可以使用泛型来优化</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">num</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>a <span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">num</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">str</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>a <span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token string\">'独孤'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'求败'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"泛型优化\"><a href=\"#泛型优化\" class=\"headerlink\" title=\"泛型优化\"></a>泛型优化</h3><p>语法为函数名字后面跟一个&lt;参数名&gt; 参数名可以随便写 例如我这儿写了T</p>\n<p>当我们使用这个函数的时候把参数的类型传进去就可以了 （也就是动态类型）</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">Add</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span>  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token generic-function\"><span class=\"token function\">Add</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token generic-function\"><span class=\"token function\">Add</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们也可以使用不同的泛型参数名，只要在数量上和使用方式上能对应上就可以。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">Sub</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span><span class=\"token constant\">U</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">:</span><span class=\"token constant\">U</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">|</span><span class=\"token constant\">U</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> params<span class=\"token operator\">:</span><span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">|</span><span class=\"token constant\">U</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> params\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token generic-function\"><span class=\"token function\">Sub</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Boolean<span class=\"token punctuation\">,</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"定义泛型接口\"><a href=\"#定义泛型接口\" class=\"headerlink\" title=\"定义泛型接口\"></a>定义泛型接口</h3><p>声明接口的时候 在名字后面加一个&lt;参数&gt;</p>\n<p>使用的时候传递类型</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">MyInter<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">fn</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> arg\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> result<span class=\"token operator\">:</span> MyInter<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> fn\n\n<span class=\"token function\">result</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"对象字面量泛型\"><a href=\"#对象字面量泛型\" class=\"headerlink\" title=\"对象字面量泛型\"></a>对象字面量泛型</h3><pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> foo<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(arg: T): T &#125;\n\nfoo = function </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(arg:T):T </span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> arg\n<span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n\nfoo(123)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"泛型约束\"><a href=\"#泛型约束\" class=\"headerlink\" title=\"泛型约束\"></a>泛型约束</h3><p>我们期望在一个泛型的变量上面，获取其length参数，但是，有的数据类型是没有length属性的</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">getLegnth</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">.</span>length\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p> 这时候我们就可以使用泛型约束</p>\n<p>于是，我们就得对使用的泛型进行约束，我们约束其为具有length属性的类型，这里我们会用到interface,代码如下</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Len</span> <span class=\"token punctuation\">&#123;</span>\n   length<span class=\"token operator\">:</span><span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">getLegnth</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> Len<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">.</span>length\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token generic-function\"><span class=\"token function\">getLegnth</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"使用keyof-约束对象\"><a href=\"#使用keyof-约束对象\" class=\"headerlink\" title=\"使用keyof 约束对象\"></a>使用keyof 约束对象</h3><p>其中使用了TS泛型和泛型约束。首先定义了T类型并使用extends关键字继承object类型的子类型，然后使用keyof操作符获取T类型的所有键，它的返回 类型是联合 类型，最后利用extends关键字约束 K类型必须为keyof T联合类型的子类型</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">prop</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">prop</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span> \n<span class=\"token function\">prop</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//此时就会报错发现找不到</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"泛型类\"><a href=\"#泛型类\" class=\"headerlink\" title=\"泛型类\"></a>泛型类</h3><p>声明方法跟函数类似名称后面定义&lt;类型&gt;</p>\n<p>使用的时候确定类型new Sub<number>()</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Sub<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">&#123;</span>\n   attr<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">add</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sub<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ns<span class=\"token punctuation\">.</span>attr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sub<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nstr<span class=\"token punctuation\">.</span>attr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">]</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","feature":false,"text":"泛型在TypeScript 是很重要的东西 例如vue3 是用ts编写的 里面用到了非常多的泛型 ok:我们看一个小例子 函数泛型我写了两个函数一个是数字类型的函数，另一个是字符串类型的函数,其实就是类型不同， 实现的功能是一样的，这时候我们就可以使用泛型来优化 function...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"TypeScript","slug":"TypeScript","count":5,"path":"api/categories/TypeScript.json"}],"tags":[{"name":"TypeScript","slug":"TypeScript","count":5,"path":"api/tags/TypeScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E6%B3%9B%E5%9E%8B\"><span class=\"toc-text\">函数泛型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%9B%E5%9E%8B%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">泛型优化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89%E6%B3%9B%E5%9E%8B%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">定义泛型接口</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F%E6%B3%9B%E5%9E%8B\"><span class=\"toc-text\">对象字面量泛型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%9B%E5%9E%8B%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">泛型约束</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8keyof-%E7%BA%A6%E6%9D%9F%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">使用keyof 约束对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%9B%E5%9E%8B%E7%B1%BB\"><span class=\"toc-text\">泛型类</span></a></li></ol>","author":{"name":"chenin","slug":"chenin","avatar":"/img/touxiang.jpg","link":"https://github.com/Ccc946","description":"盛年不重来，一日难再晨。及时宜自勉，岁月不待人。","socials":{"github":"https://github.com/Ccc946","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/","juejin":"https://juejin.cn/","customs":{}}},"mapped":true,"prev_post":{"title":"typescript配置文件","uid":"ddb15248561add228bd6a63ffdb86463","slug":"TypeScript/05.typescript配置","date":"2023-02-05T15:30:34.000Z","updated":"2023-02-05T15:54:26.602Z","comments":true,"path":"api/articles/TypeScript/05.typescript配置.json","keywords":null,"cover":"../img/u=3648235042,1573336415&fm=253&fmt=auto&app=138&f=PNG.webp","text":"生成tsconfig.json 文件这个文件是通过tsc –init命令生成的 配置详解 \"compilerOptions\": &#123; \"incremental\": true, // TS编译器在第一次编译之后会生成一个存储编译信息的文件，第二次编译会在第一次的基础上进行增...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"TypeScript","slug":"TypeScript","count":5,"path":"api/categories/TypeScript.json"}],"tags":[{"name":"TypeScript","slug":"TypeScript","count":5,"path":"api/tags/TypeScript.json"}],"author":{"name":"chenin","slug":"chenin","avatar":"/img/touxiang.jpg","link":"https://github.com/Ccc946","description":"盛年不重来，一日难再晨。及时宜自勉，岁月不待人。","socials":{"github":"https://github.com/Ccc946","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/","juejin":"https://juejin.cn/","customs":{}}},"feature":false},"next_post":{"title":"typescript类型推论|类型别名","uid":"938498ff41c16e6a4fcfa03c651941dd","slug":"TypeScript/03.typescript类型推论","date":"2023-02-05T14:49:56.000Z","updated":"2023-02-05T15:54:14.296Z","comments":true,"path":"api/articles/TypeScript/03.typescript类型推论.json","keywords":null,"cover":"../img/u=3648235042,1573336415&fm=253&fmt=auto&app=138&f=PNG.webp","text":"TypeScript里的类型推论。即，类型是在哪里如何被推断的。 基础TypeScript里，在有些没有明确指出类型的地方，类型推论会帮助提供类型。如下面的例子 let x = 3; 变量x的类型被推断为数字。 这种推断发生在初始化变量和成员，设置默认参数值和决定函数返回值时。 ...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"TypeScript","slug":"TypeScript","count":5,"path":"api/categories/TypeScript.json"}],"tags":[{"name":"TypeScript","slug":"TypeScript","count":5,"path":"api/tags/TypeScript.json"}],"author":{"name":"chenin","slug":"chenin","avatar":"/img/touxiang.jpg","link":"https://github.com/Ccc946","description":"盛年不重来，一日难再晨。及时宜自勉，岁月不待人。","socials":{"github":"https://github.com/Ccc946","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/","zhihu":"https://www.zhihu.com/","csdn":"https://blog.csdn.net/","juejin":"https://juejin.cn/","customs":{}}},"feature":false}}